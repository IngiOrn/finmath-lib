var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":86,"id":11194,"methods":[{"el":43,"sc":2,"sl":27}],"name":"RandomVariableFactory","sl":17}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_103":{"methods":[{"sl":27}],"name":"testEuropeanCallVega[RandomVariableFromArrayFactory [isUseDoublePrecisionFloatingPointImplementation=false]]","pass":true,"statements":[{"sl":28},{"sl":29},{"sl":31},{"sl":34},{"sl":35},{"sl":38}]},"test_165":{"methods":[{"sl":27}],"name":"testEuropeanCallVega[RandomVariableFromArrayFactory [isUseDoublePrecisionFloatingPointImplementation=true]]","pass":true,"statements":[{"sl":28},{"sl":29},{"sl":31},{"sl":34},{"sl":35},{"sl":38}]},"test_238":{"methods":[{"sl":27}],"name":"testEuropeanCallDelta[RandomVariableDifferentiableADFactory [toString()=AbstractRandomVariableDifferentiableFactory [randomVariableFactoryForNonDifferentiable=RandomVariableFromArrayFactory [isUseDoublePrecisionFloatingPointImplementation=true]]]]","pass":true,"statements":[{"sl":28},{"sl":29},{"sl":31},{"sl":34},{"sl":35},{"sl":38}]},"test_286":{"methods":[{"sl":27}],"name":"testEuropeanCallDelta[RandomVariableDifferentiableAADFactory [diracDeltaApproximationMethod=DISCRETE_DELTA, diracDeltaApproximationWidthPerStdDev=0.05, diracDeltaApproximationDensityRegressionWidthPerStdDev=0.5, isGradientRetainsLeafNodesOnly=true, toString()=AbstractRandomVariableDifferentiableFactory [randomVariableFactoryForNonDifferentiable=RandomVariableFromArrayFactory [isUseDoublePrecisionFloatingPointImplementation=true]]]]","pass":true,"statements":[{"sl":28},{"sl":29},{"sl":31},{"sl":34},{"sl":35},{"sl":38}]},"test_314":{"methods":[{"sl":27}],"name":"testEuropeanCallVega[RandomVariableDifferentiableAADFactory [diracDeltaApproximationMethod=DISCRETE_DELTA, diracDeltaApproximationWidthPerStdDev=0.05, diracDeltaApproximationDensityRegressionWidthPerStdDev=0.5, isGradientRetainsLeafNodesOnly=true, toString()=AbstractRandomVariableDifferentiableFactory [randomVariableFactoryForNonDifferentiable=RandomVariableFromArrayFactory [isUseDoublePrecisionFloatingPointImplementation=true]]]]","pass":true,"statements":[{"sl":28},{"sl":29},{"sl":31},{"sl":34},{"sl":35},{"sl":38}]},"test_327":{"methods":[{"sl":27}],"name":"testEuropeanCallDelta[RandomVariableFromArrayFactory [isUseDoublePrecisionFloatingPointImplementation=true]]","pass":true,"statements":[{"sl":28},{"sl":29},{"sl":31},{"sl":34},{"sl":35},{"sl":38}]},"test_459":{"methods":[{"sl":27}],"name":"testEuropeanCallVega[RandomVariableDifferentiableADFactory [toString()=AbstractRandomVariableDifferentiableFactory [randomVariableFactoryForNonDifferentiable=RandomVariableFromArrayFactory [isUseDoublePrecisionFloatingPointImplementation=true]]]]","pass":true,"statements":[{"sl":28},{"sl":29},{"sl":31},{"sl":34},{"sl":35},{"sl":38}]},"test_577":{"methods":[{"sl":27}],"name":"testEuropeanCallDelta","pass":true,"statements":[{"sl":28},{"sl":29},{"sl":31},{"sl":34},{"sl":35},{"sl":38}]},"test_643":{"methods":[{"sl":27}],"name":"testEuropeanCallDelta[RandomVariableFromArrayFactory [isUseDoublePrecisionFloatingPointImplementation=false]]","pass":true,"statements":[{"sl":28},{"sl":29},{"sl":31},{"sl":34},{"sl":35},{"sl":38}]},"test_81":{"methods":[{"sl":27}],"name":"testEuropeanCallVega","pass":true,"statements":[{"sl":28},{"sl":29},{"sl":31},{"sl":34},{"sl":35},{"sl":38}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [314, 643, 81, 238, 327, 459, 577, 103, 286, 165], [314, 643, 81, 238, 327, 459, 577, 103, 286, 165], [314, 643, 81, 238, 327, 459, 577, 103, 286, 165], [], [314, 643, 81, 238, 327, 459, 577, 103, 286, 165], [], [], [314, 643, 81, 238, 327, 459, 577, 103, 286, 165], [314, 643, 81, 238, 327, 459, 577, 103, 286, 165], [], [], [314, 643, 81, 238, 327, 459, 577, 103, 286, 165], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]